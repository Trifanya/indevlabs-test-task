package dev.trifanya;

import java.util.stream.IntStream;

public class Task {

    /**
     * Т.к. числа последовательные, то они образуют диапазон, в котором не хватает
     * одного числа. Если знать начало и конец диапазона, то можно легко посчитать
     * сумму чисел, которая должна получиться, если ни один из элементов последовательности
     * не будет пропущен - СУММУ_N. Затем нужно посчитать сумму чисел в представленной
     * последовательности - СУММУ_N-1. После этого недостающий элемент можно вычислить
     * по формуле: СУММА_N - СУММА_N-1. Если суммы равны, значит, пропущенное число
     * является началом или концом диапазона. Поскольку по условию нужно найти первое
     * пропущенное число, то пропущенное число будет началом диапазона, кроме случаев,
     * когда началом диапазона является 0.
     */
    public static int findMissingMember(int[] sequence) {
        int min = sequence[0];
        int max = sequence[0];
        int sum = 0;
        for (int i : sequence) {
            if (i < min) {
                min = i;
            }
            if (i > max) {
                max = i;
            }
            sum += i;
        }
        int rangeSum = IntStream.rangeClosed(min, max).sum();
        if (rangeSum == sum) {
            return min > 0 ? min - 1 : max + 1;
        }
        return rangeSum - sum;
    }

}
